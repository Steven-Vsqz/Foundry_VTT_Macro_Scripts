// Get the controlled actor (assumes a token is selected)
const actor = canvas.tokens.controlled[0]?.actor;

if (!actor) {
  ui.notifications.error("No token selected!");
  return;
}

// Get all items of type "buff"
const buffs = actor.items.filter(item => item.type === "buff");

// Sort buffs alphabetically by name
const buffList = buffs.sort((a, b) => a.name.localeCompare(b.name));

// Create a dialog box for buff selection
new Dialog({
  title: "Select Buffs to Activate",
  content: `
    <form>
      <div class="form-group" style="text-align: center; margin-bottom: 15px;">
        <label style="font-weight: bold; font-size: 18px; color: #4CAF50;">Select Buffs to Activate</label>
      </div>
      <div class="form-group" style="display: flex; flex-wrap: wrap; justify-content: space-around;">
        ${buffList.map(buff => `
          <div style="flex: 0 0 11%; margin-bottom: 5px; background-color: #f1f1f1; border-radius: 5px; padding: 5px;">
            <input type="checkbox" id="buff-${buff.id}" name="buff" value="${buff.id}" />
            <label for="buff-${buff.id}" style="font-size: 12px; margin-left: 5px;">${buff.name}</label>
          </div>
        `).join('')}
      </div>
    </form>
  `,
  buttons: {
    ok: {
      label: "Activate",
      callback: async (html) => {
        // Get the selected buffs
        const selectedBuffs = Array.from(html.find('[name="buff"]:checked')).map(input => input.value);

        // Iterate through the selected buffs and activate them
        for (let buffId of selectedBuffs) {
          const buff = buffs.find(b => b.id === buffId);
          if (buff) {
            await buff.update({ "data.active": true });
          }
        }
      }
    },
    cancel: {
      label: "Cancel"
    }
  },
  default: "ok"
}).render(true);
